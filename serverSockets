<?php
$host = '0.0.0.0';
$port = 8080;
$null = NULL;

$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1);
socket_bind($socket, $host, $port);
socket_listen($socket);
$clients = [$socket];

echo "Servidor WebSocket iniciado en puerto {$port}...\n";

while (true) {
    $changed = $clients;
    socket_select($changed, $null, $null, 0, 10);
    
    if (in_array($socket, $changed)) {
        $client = socket_accept($socket);
        $clients[] = $client;
        $header = socket_read($client, 1024);
        perform_handshaking($header, $client, $host, $port);
        $found_socket = array_search($socket, $changed);
        unset($changed[$found_socket]);
    }

    foreach ($changed as $changed_socket) {
        $buffer = '';
        @socket_recv($changed_socket, $buffer, 1024, 0);
        if ($buffer) {
            $msg = unmask($buffer);
            echo "Mensaje recibido: {$msg}\n";
            send_message(mask("Servidor: $msg"), $clients);
        } else {
            $index = array_search($changed_socket, $clients);
            socket_close($changed_socket);
            unset($clients[$index]);
        }
    }
}

socket_close($socket);

// Funciones para WebSocket handshake y mensajes
function perform_handshaking($received_header, $client_conn, $host, $port) {
    preg_match("/Sec-WebSocket-Key: (.*)\r\n/", $received_header, $matches);
    $key = base64_encode(pack(
        'H*',
        sha1(trim($matches[1]) . '258EAFA5-E914-47DA-95CA-C5AB0DC85B11')
    ));
    $headers = "HTTP/1.1 101 Switching Protocols\r\n".
               "Upgrade: websocket\r\n".
               "Connection: Upgrade\r\n".
               "Sec-WebSocket-Accept: $key\r\n\r\n";
    socket_write($client_conn, $headers, strlen($headers));
}

function unmask($payload) {
    $length = ord($payload[1]) & 127;
    if ($length === 126) {
        $masks = substr($payload, 4, 4);
        $data = substr($payload, 8);
    } elseif ($length === 127) {
        $masks = substr($payload, 10, 4);
        $data = substr($payload, 14);
    } else {
        $masks = substr($payload, 2, 4);
        $data = substr($payload, 6);
    }

    $text = '';
    for ($i = 0; $i < strlen($data); ++$i) {
        $text .= $data[$i] ^ $masks[$i % 4];
    }
    return $text;
}

function mask($text) {
    $b1 = 0x81;
    $length = strlen($text);
    if ($length <= 125) {
        return chr($b1) . chr($length) . $text;
    } elseif ($length <= 65535) {
        return chr($b1) . chr(126) . pack('n', $length) . $text;
    } else {
        return chr($b1) . chr(127) . pack('J', $length) . $text;
    }
}

function send_message($msg, $clients) {
    foreach ($clients as $client) {
        @socket_write($client, $msg, strlen($msg));
    }
}