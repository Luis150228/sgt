import win32api
import win32con
import time
from datetime import datetime, timedelta
import pythoncom
import sys

class MouseAutomator:
    def __init__(self):
        self.running = False
        # Horarios configurados
        self.start_time = datetime.strptime("09:20", "%H:%M").time()
        self.end_time = datetime.strptime("18:02", "%H:%M").time()
        self.pause_start = datetime.strptime("15:45", "%H:%M").time()
        self.pause_end = datetime.strptime("16:05", "%H:%M").time()

    def move_mouse(self, x, y, duration=0.5):
        """Mueve el mouse suavemente a coordenadas absolutas"""
        for step in range(1, 101):
            nx = int(x * step / 100)
            ny = int(y * step / 100)
            win32api.SetCursorPos((nx, ny))
            time.sleep(duration / 100)

    def check_schedule(self):
        """Verifica el estado de ejecución según el horario"""
        now = datetime.now().time()
        
        if now < self.start_time or now > self.end_time:
            return "STOP"
        elif self.pause_start <= now <= self.pause_end:
            return "PAUSE"
        else:
            return "RUN"

    def run(self):
        """Bucle principal con gestión de pausas"""
        self.running = True
        last_status = None
        
        try:
            while self.running:
                status = self.check_schedule()
                
                if status == "STOP":
                    print(f"[{datetime.now().strftime('%H:%M')}] Horario terminado")
                    break
                    
                elif status == "PAUSE" and last_status != "PAUSE":
                    print(f"[{datetime.now().strftime('%H:%M')}] Pausa activa (15:45-16:05)")
                    last_status = "PAUSE"
                    time.sleep(60)  # Revisar cada minuto
                    continue
                    
                elif status == "RUN":
                    if last_status == "PAUSE":
                        print(f"[{datetime.now().strftime('%H:%M')}] Reanudando actividad")
                    last_status = "RUN"
                    
                    # Patrón de movimientos
                    self.move_mouse(0, 100)
                    time.sleep(10)
                    self.move_mouse(270, 180)
                    time.sleep(10)
                    self.move_mouse(240, 150)
                    time.sleep(10)
                    self.move_mouse(270, 180)
                    time.sleep(10)
                
                time.sleep(5)  # Pequeña pausa entre verificaciones
                
        except KeyboardInterrupt:
            print("\n[!] Script detenido manualmente (Ctrl+C)")
        finally:
            self.running = False
            pythoncom.CoUninitialize()

def main():
    automator = MouseAutomator()
    
    # Esperar hasta la hora de inicio (9:20)
    while datetime.now().time() < automator.start_time:
        time_left = (datetime.combine(datetime.today(), automator.start_time) - datetime.now()
        print(f"Esperando inicio a las 9:20 | Tiempo restante: {time_left}", end='\r')
        time.sleep(1)
    
    automator.run()

if __name__ == "__main__":
    main()
