al hacer submit se ejecuta la funcion openFile que abre un archivo csv y lo guarda en una base de datos, todo funciona correcto sube la informacion a la base pero const result = openFile(base, archivo, tiempo) return result regresa "undefined" tal vez por algo asincrono que no esta bien configurado que me sugieres para poder ver lo que resuelve el servidor

for (const frmData of frmDatas) {
    frmData.addEventListener('submit', async (e)=>{
        e.preventDefault();
        const archivo = e.target[0].files[0]
        const base = e.target.name
        const tiempo = mostrarTiempo()
        const result = await openFile(base, archivo, tiempo)
        console.log(result);
    })
}

const openFile = (tipo, archivo, tiempo) => {
    return new Promise((resolve, reject) => {
        if (archivo.type != 'text/csv') {
            console.log('Archivo inválido');
            reject('Archivo inválido');
        } else {
            const lector = new FileReader();
            lector.onload = (e) => {
                const contenido = e.target.result;
                ajustCSV(tipo, contenido, tiempo)
                    .then((result) => resolve(result))
                    .catch((error) => reject(error));
            }
            lector.readAsText(archivo, 'windows-1252');
        }
    });
}


const ajustCSV = async (tipo, data, tiempo)=>{

    let regex_pattern
    let headerList
    if (tipo === 'incidentes') {
        regex_pattern = /\n\"INC/
        headerList = '"task_effective_number'
    }else{
        regex_pattern = /\n\"TSK/
    }


    let filas = data.split(regex_pattern).map(element =>{

        let fila = element.replaceAll(/\'/g, '');
        let columnas = fila.split(/\",\"/)//las cadenas de texto se dividen en columnas
        let rows = columnas[0] != headerList ? columnas : undefined;
        return rows
    });
    filas.shift()
    filas = filas.filter(registro=>{
        return registro != undefined
    })
    filas = filas.filter(registro=>{
        return registro != ''
    })

    const datasUp = []
    const partData = 100;
    for (let i = 0; i < filas.length; i+=partData) {
        datasUp.push(filas.slice(i, i + partData))
    }
    for (const dataUp of datasUp) {
        await fetchSaveDatas(tiempo, tipo, dataUp, filas.length)
    }


}

export const fetchSaveDatas = async (fecha, ruta, datos, totalreg)=>{
    const $headeDate = {
    "Acept": "*/*",
    "Content-Type": "application/json",
    "time-update": fecha,
}
    const data = JSON.stringify(datos);
    const destino = `${api.url}${ruta}.php`
    const fetchConfig = {
        method: "POST",
        headers: $headeDate,
        body: data
    }

    const peticion = new Request(destino, fetchConfig);
    try {
        const resp = await fetch(peticion);
        const result = await resp.json();
        return result
    } catch (error) {
        throw new Error(`Peticion Fecht con problemas de servidor: ${error}`);
    }
}
