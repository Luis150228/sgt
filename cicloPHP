este es mi codigo que aber un archivo de CSV y lo procesa aproximadamente 1000 pueden ser mas o menos asi que es importante saber el total de registros, quiero que cada 100 registros se ejecute $dataClass = $_consult->readDataSolicitudes($json_result, $dateOrder); y al completar el total de los registros se ejecute $bridgeTraslate = $_consult->exceuteBridge($dataClass['code'], 'solicitudes');

<?php
ini_set('max_execution_time', 300);
include_once '../classes/solImport.class.php';
include_once '../classes/incImport.class.php';
$_consult = new valoresTks;
$_consultInc = new valoresInc;

header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, PUT, DELETE, GET');

$archivo_csv = '../dataUpdate/' . $_GET['file'] . '.csv';
// /*
if (($handle = fopen($archivo_csv, 'r')) !== false) {
    stream_filter_append($handle, 'convert.iconv.ISO-8859-1/UTF-8');
    $result = array();
    $firstRowSkipped = false;
    while (($data = fgetcsv($handle, 1000, ',')) !== false) {
        if (!$firstRowSkipped) {
            $firstRowSkipped = true;
            continue;
        }
        $data = array_map(function ($value) {
            return str_replace('"', '', $value);
        }, $data);

        $result[] = $data;
    }
    fclose($handle);
    $dateOrder = date('Y-m-d H:i:s');
    $json_result = json_encode($result);

    $dataClass = $_consult->readDataSolicitudes($json_result, $dateOrder);
    if ($dataClass['code'] == '200') {
        $bridgeTraslate = $_consult->exceuteBridge($dataClass['code'], 'solicitudes');
        header('Content-Type: application/json; charset=UTF-8');
        echo json_encode($bridgeTraslate);
    }

} else {
    $error = array(
        'code' => '202',
        'mnj' => 'Error al abrir el archivo CSV'
    );
    header('Content-Type: application/json; charset=UTF-8');
    echo json_encode($error);
}
// */
/////////////////////////////////////////////////////////////////////////////////////////
<?php
ini_set('max_execution_time', 300);
include_once '../classes/solImport.class.php';
include_once '../classes/incImport.class.php';
$_consult = new valoresTks;
$_consultInc = new valoresInc;

header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, PUT, DELETE, GET');

$archivo_csv = '../dataUpdate/' . $_GET['file'] . '.csv';

// Comprobamos si el archivo CSV se puede abrir correctamente
if (($handle = fopen($archivo_csv, 'r')) !== false) {
    stream_filter_append($handle, 'convert.iconv.ISO-8859-1/UTF-8');
    $result = array();
    $firstRowSkipped = false;

    while (($data = fgetcsv($handle, 1000, ',')) !== false) {
        if (!$firstRowSkipped) {
            $firstRowSkipped = true;
            continue;
        }
        $data = array_map(function ($value) {
            return str_replace('"', '', $value);
        }, $data);

        $result[] = $data;
    }

    fclose($handle);

    // Dividir el arreglo $result en lotes de 100 registros
    $batchSize = 100;
    $batches = array_chunk($result, $batchSize);

    // Procesar cada lote de 100 registros
    foreach ($batches as $batch) {
        $dateOrder = date('Y-m-d H:i:s');
        $json_result = json_encode($batch);
        $dataClass = $_consult->readDataSolicitudes($json_result, $dateOrder);
        
        // Puedes manejar la respuesta aquí o acumularla en un arreglo para procesamiento final
        
    }

    // Ejecutar $bridgeTraslate después de procesar todos los lotes
    if ($dataClass['code'] == '200') {
        $bridgeTraslate = $_consult->exceuteBridge($dataClass['code'], 'solicitudes');
        // Puedes manejar la respuesta aquí o acumularla en un arreglo para procesamiento final
    }

} else {
    $error = array(
        'code' => '202',
        'mnj' => 'Error al abrir el archivo CSV'
    );
    header('Content-Type: application/json; charset=UTF-8');
    echo json_encode($error);
}
?>
